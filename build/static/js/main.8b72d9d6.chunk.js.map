{"version":3,"sources":["app/components/Users/UserCard/UserCard.tsx","app/services/Search.service.ts","app/constants/api-params.ts","app/components/Users/Users.tsx","app/constants/api-url.ts","app/components/Layout/Navbar/Navbar.tsx","app/components/Layout/Layout.tsx","app/components/common/Spinner.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["UserCard","props","className","Card","CardContent","src","avatar_url","alt","Typography","color","gutterBottom","login","CardActions","Button","onClick","window","open","html_url","size","defaultProps","id","userName","searchSubject","Subject","searchService","searchText","next","asObservable","SEARCH_PARAMS","q","Users","state","users","searchParams","previousSearchText","searchUsers","isLoading","axios","get","params","then","data","setState","items","catch","err","getUsersList","this","pipe","debounceTime","subscribe","console","log","length","map","user","key","PureComponent","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","Navbar","classes","useState","setstate","AppBar","style","Toolbar","cursor","variant","noWrap","aria-hidden","InputBase","onChange","event","target","value","placeholder","input","inputProps","Layout","Spinner","CircularProgress","useStyle","App","loading","loadingState","React","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8b72d9d6.chunk.js","sourcesContent":["import React from \"react\";\nimport { UserPropsIF } from \"../Users.interface\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  CardActions,\n  Button,\n} from \"@material-ui/core\";\nimport \"./UserCard.scss\";\n\nexport default function UserCard(props: UserPropsIF) {\n  const openProfile = () => {\n    window.open(props.html_url);\n  };\n\n  // render() {\n  // const { id, avatar_url, profile_url, userName } = this.props.;\n  return (\n    <div className=\"userCardContainer\">\n      <Card className=\"userCard\">\n        <CardContent>\n          <figure>\n            <img className=\"avatarImage\" src={props.avatar_url} alt=\"\" />\n          </figure>\n          <Typography color=\"textSecondary\" gutterBottom>\n            {props.login}\n          </Typography>\n\n          {/* <Typography color=\"textSecondary\">adjective</Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              well meaning and kindly.\n              <br />\n              {'\"a benevolent smile\"'}\n            </Typography> */}\n        </CardContent>\n        <CardActions className=\"cardAction\">\n          <Button color=\"primary\" onClick={openProfile} size=\"small\">\n            Visit Profile\n          </Button>\n        </CardActions>\n      </Card>\n    </div>\n  );\n  // }\n}\n\nUserCard.defaultProps = {\n  id: \"123\",\n  userName: \"mickeyminion14\",\n  html_url: \"www.google.com\",\n  avatar_url:\n    \"https://vignette.wikia.nocookie.net/despicableme/images/c/ca/Bob-from-the-minions-movie.jpg/revision/latest/scale-to-width-down/350?cb=20151224154354\",\n};\n","import { Subject } from \"rxjs\";\n\nconst searchSubject = new Subject();\n\nexport const searchService = {\n  sendSearchText: (searchText: string) =>\n    searchSubject.next({ searchText: searchText }),\n  getSearchText: () => searchSubject.asObservable(),\n};\n","export const SEARCH_PARAMS = {\n  q: \"\",\n};\n","import React, { PureComponent } from \"react\";\nimport UserCard from \"./UserCard/UserCard\";\nimport { UsersStateIF } from \"./Users.interface\";\nimport axios from \"axios\";\nimport {\n  GITHUB_USERS_GET,\n  GITHUB_USERS_SEARCH_GET,\n} from \"../../constants/api-url\";\nimport { searchService } from \"../../services/Search.service\";\nimport { debounceTime } from \"rxjs/operators\";\nimport { SEARCH_PARAMS } from \"../../constants/api-params\";\n\nexport class Users extends PureComponent {\n  props: any;\n  state: UsersStateIF = {\n    users: [],\n  };\n\n  searchParams = { ...SEARCH_PARAMS };\n  previousSearchText = \"\";\n\n  componentWillMount() {\n    this.getUsersList();\n    searchService\n      .getSearchText()\n      .pipe(debounceTime(300))\n      .subscribe((data: any) => {\n        // eslint-disable-next-line\n        if (\n          data.searchText !== \"\" &&\n          data.searchText !== this.previousSearchText\n        ) {\n          console.log(\"came here\");\n\n          this.searchParams.q = data.searchText;\n          this.previousSearchText = data.searchText;\n          this.searchUsers();\n          return;\n        }\n\n        if (data.searchText === \"\") {\n          this.getUsersList();\n          return;\n        }\n      });\n  }\n\n  searchUsers = () => {\n    this.props.isLoading(true);\n\n    axios\n      .get(GITHUB_USERS_SEARCH_GET, { params: this.searchParams })\n      .then((data) => {\n        this.setState({\n          users: [...data.data.items],\n        });\n        this.props.isLoading(false);\n      })\n      .catch((err) => {\n        this.setState({\n          users: [],\n        });\n        this.props.isLoading(false);\n      });\n  };\n  getUsersList = () => {\n    this.props.isLoading(true);\n    axios\n      .get(GITHUB_USERS_GET)\n      .then((data: any) => {\n        this.setState({\n          users: [...data.data],\n        });\n        this.props.isLoading(false);\n      })\n      .catch((err) => {\n        this.setState({\n          users: [],\n        });\n        this.props.isLoading(false);\n      });\n  };\n\n  render() {\n    return this.state.users.length > 0 ? (\n      <div>\n        {this.state.users.map((user) => (\n          <div key={user.id} className=\"col-md-3\">\n            <UserCard\n              login={user.login}\n              avatar_url={user.avatar_url}\n              html_url={user.html_url}\n              id={user.id}\n            />\n          </div>\n        ))}\n      </div>\n    ) : (\n      <div>\n        <h1>No data Found !</h1>\n      </div>\n    );\n  }\n}\n","export const GITHUB_USERS_GET = \"https://api.github.com/users?since=000\";\nexport const GITHUB_USERS_SEARCH_GET = \"https://api.github.com/search/users\";\n","import React, { useState } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n// import IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport {\n  createStyles,\n  fade,\n  Theme,\n  makeStyles,\n} from \"@material-ui/core/styles\";\n// import MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { searchService } from \"../../../services/Search.service\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      display: \"none\",\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"block\",\n      },\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing(1),\n        width: \"auto\",\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    inputRoot: {\n      color: \"inherit\",\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        width: \"12ch\",\n        \"&:focus\": {\n          width: \"20ch\",\n        },\n      },\n    },\n  })\n);\n\nexport default function Navbar() {\n  const classes = useStyles();\n  const styles: any = {\n    backgroundColor: \"#03a5fc\",\n  };\n\n  const [state, setstate] = useState({ searchText: \"\" });\n  const searchChangeHandler = (event: any) => {\n    setstate({\n      searchText: event.target.value,\n    });\n    searchService.sendSearchText(event.target.value);\n  };\n  return (\n    <div className={classes.root}>\n      <AppBar style={styles} position=\"static\">\n        <Toolbar>\n          {/* <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton> */}\n          <Typography\n            className={classes.title}\n            style={{ cursor: \"pointer\" }}\n            variant=\"h6\"\n            noWrap\n          >\n            <i className=\"fa fa-github\" aria-hidden=\"true\" /> Github Finder\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              onChange={searchChangeHandler}\n              value={state.searchText}\n              placeholder=\"Search…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ \"aria-label\": \"search\" }}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Navbar from \"./Navbar/Navbar\";\n\nexport default function Layout() {\n  return (\n    <div>\n      <Navbar />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      \"& > * + *\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n  })\n);\n\nexport default function Spinner() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress style={useStyle} size={100} />\n    </div>\n  );\n}\n\nconst useStyle = {\n  color: \"#03a5fc\",\n};\n","import React, { Fragment } from \"react\";\n\nimport \"./App.scss\";\nimport { Users } from \"./components/Users/Users\";\nimport Layout from \"./components/Layout/Layout\";\nimport Spinner from \"./components/common/Spinner\";\nexport class App extends React.PureComponent {\n  state = {\n    loading: false,\n  };\n\n  componentWillMount() {\n    this.isLoading(true);\n  }\n\n  isLoading = (loadingState: boolean) => {\n    this.setState({\n      loading: loadingState,\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.loading ? (\n          <div className=\"loader\">\n            <Spinner />\n          </div>\n        ) : null}\n        <div className=\"appWrapper\">\n          <Layout />\n          <main className=\"mainWrapper\">\n            <Users isLoading={this.isLoading} />\n          </main>\n        </div>\n      </Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}